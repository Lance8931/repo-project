<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.user.mapper.UserMapper">
	<!-- 为了返回list 类型而定义的returnMap -->
	<resultMap type="User" id="resultListUser">
        <id column="id" property="id" />
        <result column="userName" property="userName" />
        <result column="userAge" property="userAge" />
        <result column="userAddress" property="userAddress" />
    </resultMap>
    <select id="selectUserByID" parameterType="int" resultType="User">
        select * from `user` where id = #{id}
    </select>
    
    <!-- 返回list 的select 语句，注意 resultMap 的值是指向前面定义好的 -->
    <select id="selectUsers" parameterType="string" resultMap="resultListUser">
        select * from user where userName like #{userName}
    </select>
    
    <!--执行增加操作的SQL语句。id和parameterType分别与
    	UserMapper接口中的addUser方法的名字和参数类型一致。
    	以#{userName}的形式引用User参数的userName属性，
    	MyBatis将使用反射读取User参数的此属性。
    	#{userName}中userName大小写敏感。引用其他的userAge等属性与此一致。
    	seGeneratedKeys设置为"true"表明要MyBatis获取由数据库
    	自动生成的主键；keyProperty="id"指定把获取到的主键值注入到user的id属性--> 
    <insert id="addUser" parameterType="User" 
        useGeneratedKeys="true" keyProperty="id"> 
        insert into user(userName,userAge,userAddress)  
             values(#{userName},#{userAge},#{userAddress})  
    </insert>
    
    <insert id="addUser1" parameterType="User">
    	insert into user (id,userName,userAge,userAddress)  
             values(#{id},#{userName},#{userAge},#{userAddress})
    </insert>
    
    <update id="updateUser" parameterType="User" >
        update user set userName=#{userName},userAge=#{userAge},userAddress=#{userAddress} where id=#{id}
    </update>
    
    <delete id="deleteUser" parameterType="int">
        delete from user where id=#{id}
    </delete>
    
    <!-- User 联合文章进行查询 方法之一的配置 (多对一的方式)  -->    
    <resultMap id="resultUserArticleList" type="Article">
        <id property="id" column="aid" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <association property="user" javaType="User">
            <id property="id" column="id" />
            <result property="userName" column="userName" />
            <result property="userAddress" column="userAddress" />            
        </association>        
    </resultMap>
    
     <!-- User 联合文章进行查询 方法之二的配置 (多对一的方式) -->    
    <resultMap id="resultUserArticleList-2" type="Article">
        <id property="id" column="aid" />
        <result property="title" column="title" />
        <result property="content" column="content" />        
        <association property="user" javaType="User" resultMap="resultListUser" />            
    </resultMap>
    <select id="getUserArticles" parameterType="int" resultMap="resultUserArticleList">
       SELECT
			A.id,
			A.userName,
			A.userAddress,
			B.id aid,
			B.title,
			B.content
		FROM
			USER A
		RIGHT OUTER JOIN article B ON A.id = B.userid
    </select>
    
    <!-- 返回list 的select 语句，注意 resultMap 的值是指向前面定义好的 -->
    <select id="selectUsersByHandler" parameterType="string" resultMap="resultListUser">
        select * from user where userName like #{userName}
    </select>
</mapper>