#运行用户
#user nobody;

#启动进程
worker_processes 1;

#全局错误日志及PID文件
#error_log ../logs/error.log;
#pid ../logs/nginx.pid;

#工作模式及连接数上限
events {
#单个后台worker process进程的最大并发链接数
worker_connections 1024;

#use epoll; epoll是多路复用IO(I/O Multiplexing)中的一种方式，但是仅用于Linux2.6以上内核，可以大大提高nginx的性能
#multi_accept on;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {

#设定mime类型,类型由mime.type文件定义
include mime.types;

#默认的mime类型
default_type application/octet-stream;

#设定日志格式
access_log ../logs/access.log

#sendfile指令指定nginx是否调用sendfile函数(zero copy方式)来输出文件
#对于普通应用，必须设置为on，如果用来进行下载等应用磁盘IO重负载应用，
#可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的uptime
sendfile on;

#连接超时时间
keepalive_timeout 65;

#开启gzip压缩
gzip on;
#禁用IE6的gzip压缩
#gzip_disable "MSIE [1-6]\.(?!.*SV1)";

#设定请求缓冲
client_header_buffer_size 1k;
#设定请求缓冲最大的数量和大小
large_client_header_buffers 4 4k;

#导入其他配置文件
#include /etc/nginx/*.conf
#include /etc/nginx/*.conf

#设定负载均衡的服务器列表
#Bussinsee Node config.负载均衡配置weight表示分发权重，weight越高分发的几率也就越高。
upstream businessNodes{ 
server local.haiyuehui.com:8080 weight=1; 
#check interval=3000 rise=2 fall=5 timeout=1000 type=http; 
#check_http_send "GET / HTTP/1.0\r\n\r\n"; 
#check_http_expect_alive http_2xx http_3xx; 
}

# HTTP server config.
	server {
		#监听80端口
		listen 80;

		#定义使用127.0.0.1:8080访问
		server_name 127.0.0.1:8080;

		#编码
		charset utf-8;

		#设定本虚拟主机的访问日志
		#access_log logs/access.log main;
		location /hyh_intranet {
			#后端的web服务器可以通过X-Forwarded-For获取用户真实IP
			proxy_set_header Host $host; 
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Host $host; 
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
			proxy_set_header X-Forwarded-Proto $scheme; 
			proxy_pass http://businessNodes;
			#proxy_redirect off;
			
			#client_max_body_size 10m;    #允许客户端请求的最大单文件字节数
            #client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，
            #proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)
            #proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)
            #proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)
            #proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            #proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            #proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）
            #proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
		}
		location /hyh_service {
			proxy_set_header Host $host; 
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Host $host; 
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
			proxy_set_header X-Forwarded-Proto $scheme; 
			proxy_pass http://businessNodes;
			#proxy_redirect off;
		}

		location /static {
			alias D:\code\workspace\haiyuehui\hyh_static;
		}

		location /fstatic {
			alias E:\upload;
		}

	}

# HTTPS server config.
	server {
		listen 443;
		server_name 127.0.0.1:8080;
		charset utf-8;

		location /hyh_intranet {
			proxy_set_header Host $host; 
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Host $host; 
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
			proxy_set_header X-Forwarded-Proto $scheme; 
			proxy_pass http://businessNodes;
			#proxy_redirect off;
		}
		location /hyh_service {
			proxy_set_header Host $host; 
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-Host $host; 
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
			proxy_set_header X-Forwarded-Proto $scheme; 
			proxy_pass http://businessNodes;
			#proxy_redirect off;
		}

		location /static {
			alias D:\code\workspace\haiyuehui\hyh_static;
		}

		location /fstatic {
			alias E:\upload;
		}

	}
}